# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12LUGHJcsXcAQ3mg7nhYUskQCcNOkdzhf
"""

!pip install transformers torch gradio

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

def generate_response(prompt, max_length=512):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

def concept_explanation(concept):
    prompt = f"Explain the concept of {concept} in detail with examples:"
    return generate_response(prompt, max_length=800)

def quiz_generator(concept):
    prompt = f"Generate 5 quiz questions about {concept} with different question types (multiple choice, true/false, short answer). At the end, provide all the answers in a separate ANSWERS section:"
    return generate_response(prompt, max_length=1000)

# Create Gradio interface
with gr.Blocks() as app:
    gr.Markdown("# Educational AI Assistant")

    # Instructions/Guidance Section
    gr.Markdown("Welcome to the Educational AI Assistant! You can either:")
    gr.Markdown("1. **Learn about a concept** by providing the name of a topic.")
    gr.Markdown("2. **Generate a quiz** on a topic of your choice.")

    with gr.Tabs():
        # Concept Explanation Tab
        with gr.TabItem("Concept Explanation"):
            gr.Markdown("### Explain a Concept")
            concept_input = gr.Textbox(label="Enter a concept", placeholder="e.g., machine learning", lines=1)
            explain_btn = gr.Button("Generate Explanation")
            explanation_output = gr.Textbox(label="Explanation", lines=10, interactive=False)

            explain_btn.click(concept_explanation, inputs=concept_input, outputs=explanation_output)

        # Quiz Generator Tab
        with gr.TabItem("Quiz Generator"):
            gr.Markdown("### Generate a Quiz")
            quiz_input = gr.Textbox(label="Enter a topic", placeholder="e.g., physics", lines=1)
            quiz_btn = gr.Button("Generate Quiz")
            quiz_output = gr.Textbox(label="Quiz Questions", lines=15, interactive=False)

            quiz_btn.click(quiz_generator, inputs=quiz_input, outputs=quiz_output)

    # Injecting Custom CSS Styling
    gr.HTML("""
    <style>
        .gr-button {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 10px 20px;
            font-size: 16px;
        }
        .gr-button:hover {
            background-color: #45a049;
        }
        .gr-textbox {
            font-size: 14px;
            padding: 10px;
        }
        .gr-markdown {
            font-size: 18px;
            font-weight: bold;
            color: #333;
        }
    </style>
    """)

    app.launch(share=True)